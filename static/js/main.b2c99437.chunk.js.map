{"version":3,"sources":["components/Stats.js","components/Type.js","helper.js","components/Hit.js","components/Content.js","components/Facet.js","App.js","serviceWorker.js","index.js"],"names":["connectStateResults","searchResults","nbHits","className","src","aria-label","id","alt","query","Fragment","processingTimeMS","Type","types","map","type","key","removeScheme","url","URL","e","split","Hit","hit","img","name","Highlight","attribute","tagName","searchState","Hits","hitComponent","connectRefinementList","translations","searchable","items","isFromSearch","length","RefinementList","process","REACT_APP_ALGOLIA_APPLICATION_ID","REACT_APP_ALGOLIA_PUBLIC_API_KEY","Error","searchClient","algoliasearch","App","InstantSearch","indexName","Configure","hitsPerPage","attributesToSnippet","snippetEllipsisText","Content","SearchBox","placeholder","Stats","Pagination","Panel","header","Facet","operator","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2c99437.chunk.js","sourcesContent":["import React from \"react\";\nimport { connectStateResults } from \"react-instantsearch-dom\";\nexport default connectStateResults(({ searchResults }) => {\n  if (searchResults === null || searchResults.nbHits === 0) return <div />;\n  return (\n    <div className=\"ais-Stats\">\n      <img\n        src=\"img/pokeball.png\"\n        aria-label=\"pokeball-icon\"\n        id=\"pokeball-icon\"\n        alt=\"pokeball-icon\"\n      />{\" \"}\n      <strong>{searchResults.nbHits}</strong> Pokemon found{\" \"}\n      {searchResults.query !== \"\" && (\n        <React.Fragment>\n          for <strong>{`\"${searchResults.query}\"`}</strong>\n        </React.Fragment>\n      )}{\" \"}\n      in <strong>{searchResults.processingTimeMS}ms</strong>\n    </div>\n  );\n});\n","import React from \"react\";\n\nexport default function Type({ types }) {\n  return types.map(type => (\n    <span className={\"type type--\" + type} key={type}>\n      {type}\n    </span>\n  ));\n}\n","export function removeScheme(url) {\n  try {\n    new URL(url);\n  } catch (e) {\n    return url;\n  }\n  return url.split(\":\")[1];\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Highlight } from \"react-instantsearch-dom\";\nimport Type from \"./Type\";\nimport { removeScheme } from \"../helper\";\n\nexport default function Hit({ hit }) {\n  return (\n    <div className=\"hit\" key={hit.id}>\n      <div className=\"hit-image\">\n        <aside className=\"pokedex-number\">{hit.id}</aside>\n        <img src={removeScheme(hit.img)} alt={hit.name} />\n      </div>\n      <div className=\"hit-content\">\n        <div>\n          <div className=\"hit-name\">\n            <Highlight attribute=\"name\" hit={hit} tagName=\"em\" />\n          </div>\n        </div>\n        <div className=\"types-container\">\n          <Type types={hit.type} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nHit.propTypes = {\n  hit: PropTypes.object.isRequired,\n};\n","import React from \"react\";\nimport { Hits } from \"react-instantsearch-dom\";\nimport { connectStateResults } from \"react-instantsearch/connectors\";\nimport Hit from \"./Hit.js\";\nexport default connectStateResults(\n  ({ searchState, searchResults }) =>\n    searchResults && searchResults.nbHits !== 0 ? (\n      <Hits hitComponent={Hit} />\n    ) : (\n      <div>\n        No results found for <strong>{searchState.query}</strong>.\n      </div>\n    )\n);\n","import React from \"react\";\nimport { RefinementList, connectRefinementList } from \"react-instantsearch-dom\";\n\nexport default connectRefinementList(\n  ({ translations, searchable, attribute, items, isFromSearch }) =>\n    isFromSearch || (items.length && items.length > 0) ? (\n      <RefinementList\n        attribute={attribute}\n        searchable={searchable}\n        translations={translations}\n      />\n    ) : (\n      <div className=\"ais-RefinementList-item\">No results.</div>\n    )\n);\n","import React from \"react\";\nimport {\n  InstantSearch,\n  SearchBox,\n  Pagination,\n  Configure,\n  Panel,\n} from \"react-instantsearch-dom\";\nimport \"./App.css\";\nimport algoliasearch from \"algoliasearch/lite\";\nimport Stats from \"./components/Stats.js\";\nimport Content from \"./components/Content\";\nimport Facet from \"./components/Facet\";\nconst {\n  REACT_APP_ALGOLIA_APPLICATION_ID,\n  REACT_APP_ALGOLIA_PUBLIC_API_KEY,\n} = process.env;\n\nif (!REACT_APP_ALGOLIA_APPLICATION_ID || !REACT_APP_ALGOLIA_PUBLIC_API_KEY) {\n  throw new Error(\n    \"Please configure the env variables [REACT_APP_ALGOLIA_APPLICATION_ID] and [REACT_APP_ALGOLIA_PUBLIC_API_KEY] in your .env file\"\n  );\n}\n\nconst searchClient = algoliasearch(\n  REACT_APP_ALGOLIA_APPLICATION_ID,\n  REACT_APP_ALGOLIA_PUBLIC_API_KEY\n);\n\nfunction App() {\n  return (\n    <InstantSearch searchClient={searchClient} indexName=\"pokemon\">\n      <main className=\"search-container\">\n        <Configure\n          hitsPerPage={10}\n          attributesToSnippet={[]}\n          snippetEllipsisText=\" [...]\"\n        />\n        <div className=\"right-panel\">\n          <div id=\"hits\">\n            <Content />\n          </div>\n          <div id=\"searchbox\">\n            <SearchBox\n              translations={{\n                placeholder: \"Search for your favourite Pokemon\",\n              }}\n            />\n          </div>\n          <div id=\"stats\">\n            <Stats />\n          </div>\n          <div id=\"pagination\">\n            <Pagination />\n          </div>\n        </div>\n        <div className=\"left-panel\">\n          <div id=\"type\">\n            <Panel header=\"Types\">\n              <Facet attribute=\"type\" searchable={true} operator=\"and\" />\n            </Panel>\n          </div>\n          <div id=\"weaknesses\">\n            <Panel header=\"Weaknesses\">\n              <Facet attribute=\"weaknesses\" searchable={true} />\n            </Panel>\n          </div>\n        </div>\n      </main>\n    </InstantSearch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}